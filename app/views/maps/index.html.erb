<head>
  <style type="text/css">
  #map-canvas {
    height: 400px;
  }

  </style>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
  <script type="text/javascript"
  src="https://maps.googleapis.com/maps/api/js?libraries=places,weather&sensor=true">  </script>
  </script>
  <script type="text/javascript">

    // var markers = [];
    var map;
    var directionsDisplay;
    var elevator;
    var infowindow = new google.maps.InfoWindow();

    // var service;

    // function handleSearchResults(results, status)
    // {
    //  console.log(results);

    //  for(var i = 0; i < results.length; i++) {
    //      var marker = new google.maps.Marker({
    //      position: results[i].geometry.location,
    //      map: map,
    //      icon: results[i].icon
    //    });

    //  }
    // }

    // function performSearch()
    // {
    //  var request = {
    //    bounds: map.getBounds(),
    //    name: "McDonald's"
    //  }
    //  service.nearbySearch(request, handleSearchResults);
    // }
    // Load the Visualization API and the columnchart package.

    function initialize(location)
    {

    console.log(location);
    // drawPath();

    var input = document.getElementById('from');
    // var options = {
    //     types: ['(cities)']
    // };
    var autocomplete = new google.maps.places.Autocomplete(input);
    
    google.maps.event.addDomListener(window, 'load', initialize); 
    var input1 = document.getElementById('to');
    // var options = {
    //     types: ['(cities)']
    // };

    var autocomplete = new google.maps.places.Autocomplete(input1);
    
    google.maps.event.addDomListener(window, 'load', initialize); 
      var currentLocation = new google.maps.LatLng(location.coords.latitude, location.coords.longitude);

      var mapOptions = {
        zoom: 12,
        center: currentLocation,
        mapTypeId: 'terrain'
        };
          // Create an ElevationService
      // elevator = new google.maps.ElevationService();
      // Add a listener for the click event and call getElevation on that location
      // google.maps.event.addListener(map, 'click', getElevation);  

        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions), {mapTypeId: google.maps.MapTypeId.ROADMAP}; 
        // var marker = new google.maps.Marker({
        //   position: currentLocation,
        //   map: map
        // });

        var trafficLayer = new google.maps.TrafficLayer();
          $('#toggle_traffic').click(function () {
          if (trafficLayer.getMap()){
            trafficLayer.setMap(null);
          }
          else {
            trafficLayer.setMap(map);
          }
        });

        var weatherLayer = new google.maps.weather.WeatherLayer({
          temperatureUnits: google.maps.weather.TemperatureUnit.FAHRENHEIT
        });
        var cloudLayer = new google.maps.weather.CloudLayer();

        $('#toggle_weather').click(function() {

          if (weatherLayer.getMap() || cloudLayer.getMap()) {
            weatherLayer.setMap(null);
            cloudLayer.setMap(null);
          }
          else {
            weatherLayer.setMap(map);
          }
        });
        elevator = new google.maps.ElevationService();
    
    // Add a listener for the click event and call getElevation on that location
  google.maps.event.addListener(map, 'click', getElevation);
     
        // var from = $("#from").val();
        // var to = $("#to").val();
        // var directionsService = new google.maps.DirectionsService();
        // var directionsRequest = {
        //   origin: from,
        //   destination: to,
        //   travelMode: google.maps.DirectionsTravelMode.DRIVING,
        //   unitSystem: google.maps.UnitSystem.IMPERIAL
        // };
        // directionsService.route(
        //   directionsRequest,
        //   function(response, status)
        //   {
        //     if (status == google.maps.DirectionsStatus.OK)
        //     {
        //       new google.maps.DirectionsRenderer({
        //         map: map,
        //         directions: response
        //       });
        //     }
        //     else
        //       $("#error").append("Unable to retrieve your route<br />");
        //   }
        // );
      }

    //      var defaultBounds = new google.maps.LatLngBounds(
  //     new google.maps.LatLng(location.coords.latitude, location.coords.longitude),
  //     new google.maps.LatLng(location.coords.latitude, location.coords.longitude));
  // map.fitBounds(defaultBounds);

  // Create the search box and link it to the UI element.
//   var input = /** @type {HTMLInputElement} */(
//       document.getElementById('pac-input'));
//   // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

//   var searchBox = new google.maps.places.SearchBox(
//     /** @type {HTMLInputElement} */(input));

//   // Listen for the event fired when the user selects an item from the
//   // pick list. Retrieve the matching places for that item.
//   google.maps.event.addListener(searchBox, 'places_changed', function() {
//     var places = searchBox.getPlaces();

//     if (places.length == 0) {
//       return;
//     }
//     for (var i = 0, marker; marker = markers[i]; i++) {
//       marker.setMap(null);
//     }

//     // For each place, get the icon, place name, and location.
//     markers = [];
//     var bounds = new google.maps.LatLngBounds();
//   //   if (marker > 1) {
//    //   map.fitBounds(mapBounds);
//    // }
//    // else if (marker == 1) {
//    //   map.setCenter(mapBounds.getCenter());
//    //   map.setZoom(14);
//    // };
//     for (var i = 0, place; place = places[i]; i++) {
//       var image = {
//         url: place.icon,
//         size: new google.maps.Size(71, 71),
//         origin: new google.maps.Point(0, 0),
//         anchor: new google.maps.Point(17, 34),
//         scaledSize: new google.maps.Size(25, 25)
//       };

//       // Create a marker for each place.
//       var marker = new google.maps.Marker({
//         map: map,
//         // icon: image,
//         title: place.name,
//         position: place.geometry.location
//       });

//       markers.push(marker);

//       bounds.extend(place.geometry.location);
//     }

//     map.fitBounds(bounds);
//   });

//   // Bias the SearchBox results towards places that are within the bounds of the
//   // current map's viewport.
//   google.maps.event.addListener(map, 'bounds_changed', function() {
//     var bounds = map.getBounds();
//     searchBox.setBounds(bounds);
//   });
// }
//     var directionsService = new google.maps.DirectionsService();
//     var directionsDisplay = new google.maps.DirectionsRenderer();

//      directionsDisplay.setMap(map);
//      directionsDisplay.setPanel(document.getElementById('panel'));

//     var request = {
//        origin: currentLocation, 
//        destination: 'Mount Pleasant',
//        travelMode: google.maps.DirectionsTravelMode.DRIVING
//      };

//     directionsService.route(request, function(response, status) {
//        if (status == google.maps.DirectionsStatus.OK) {
//          directionsDisplay.setDirections(response);
//        }
//     });
// }
// function geolocate() {
//   if (navigator.geolocation) {
//     navigator.geolocation.getCurrentPosition(function(position) {
//       var geolocation = new google.maps.LatLng(
//           position.coords.latitude, position.coords.longitude);
//       var circle = new google.maps.Circle({
//         center: geolocation,
//         radius: position.coords.accuracy
//       });
//       autocomplete.setBounds(circle.getBounds());
//     });
//   }
// }
// }

function calculateRoute(from, to) {

  var directionsService = new google.maps.DirectionsService();
  var directionsRequest = {
    origin: from,
    destination: to,
    provideRouteAlternatives: true,
    travelMode: google.maps.DirectionsTravelMode.DRIVING,
    unitSystem: google.maps.UnitSystem.IMPERIAL
  };
  var directionsDisplay = new google.maps.DirectionsRenderer();

    directionsDisplay.setMap(map);
    directionsDisplay.setPanel(document.getElementById('panel'));
    directionsService.route(
      directionsRequest,
      function(response, status)
      {
        if (status == google.maps.DirectionsStatus.OK)
        {
          for (var i = 0, len = response.routes.length; i < len; i++) {
                new google.maps.DirectionsRenderer({
                    map: map,
                    directions: response,
                    routeIndex: i
                });
            }
          directionsDisplay.setDirections(response);
          new google.maps.DirectionsRenderer({
            map: map,
            directions: response
          });
        }
        else
          $("#error").append("Unable to retrieve your route<br />");
      }
        );
      }
function getElevation(event) {

  var locations = [];

  // Retrieve the clicked location and push it on the array
  var clickedLocation = event.latLng;
  locations.push(clickedLocation);

  // Create a LocationElevationRequest object using the array's one value
  var positionalRequest = {
    'locations': locations
  }

  // Initiate the location request
  elevator.getElevationForLocations(positionalRequest, function(results, status) {
    if (status == google.maps.ElevationStatus.OK) {

      // Retrieve the first result
      if (results[0]) {

        // Open an info window indicating the elevation at the clicked position
        infowindow.setContent('The elevation at this point <br>is ' + results[0].elevation + ' meters.');
        infowindow.setPosition(clickedLocation);
        infowindow.open(map);
      } else {
        alert('No results found');
      }
    } else {
      alert('Elevation service failed due to: ' + status);
    }
  });
}
//     function initialize() {
//     var input = document.getElementById('from');
//     var options = {
//         types: ['(cities)']
//     };
//     var autocomplete = new google.maps.places.Autocomplete(input);
//     }
//     google.maps.event.addDomListener(window, 'load', initialize);


// function initialize1() {
//     var input1 = document.getElementById('to');
//     var options = {
//         types: ['(cities)']
//     };
//     var autocomplete = new google.maps.places.Autocomplete(input1);
//     }
//     google.maps.event.addDomListener(window, 'load', initialize1);    

    $(document).ready(function()
    {
      if (typeof navigator.geolocation == "undefined") {
          $("#error").text("Your browser doesn't support the Geolocation API");
          return;
        }
 
        $("#from-link, #to-link").click(function(event) {
          event.preventDefault();
          var addressId = this.id.substring(0, this.id.indexOf("-"));
 
          navigator.geolocation.getCurrentPosition(function(position) {
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({
              "location": new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
            },
            function(results, status) {
              if (status == google.maps.GeocoderStatus.OK)
                $("#" + addressId).val(results[0].formatted_address);
              else
                $("#error").append("Unable to retrieve your address<br />");
            });
          },
          function(positionError){
            $("#error").append("Error: " + positionError.message + "<br />");
          },
          {
            enableHighAccuracy: true,
            timeout: 10 * 1000 // 10 seconds
          });
        });
 
        $("#calculate-route").submit(function(event) {
          event.preventDefault();
          calculateRoute($("#from").val(), $("#to").val());
        });
        navigator.geolocation.getCurrentPosition(initialize);
      });
      
      
  </script>
</head> 
<body>
<!-- <strong>Start: </strong>
<input id="start" type="text" placeholder="Start typing here"> -->
<!-- <form id="calculate-route" name="calculate-route" action="#" method="get">
  <label for="from">From:</label>
  <input type="text" id="from" name="from" required="required" placeholder="Start typing or click Use my location" size="30" />
  
  <button id="from-link" href="#" class="btn btn-default"><span class="icon-location-arrow"></span></button>
 
  <label for="to">To:</label>
  <input type="text" id="to" name="to" required="required" placeholder="Start typing or click Use my location" size="30" />
  <button id="to-link" href="#" class="btn btn-default"><span class="icon-location-arrow"></button>
  <br />
 
  <input type="submit" class="btn btn-default btn-lg"/>
  <input type="reset" class="btn btn-default btn-lg"/>
</form>
<button id="toggle_traffic" class="btn btn-default btn-lg"> Traffic
<span class="icon-taxi-park-front"></span>
</button>
<button id="toggle_weather" class="btn btn-default btn-lg"> Weather 
<span class="icon-cloud"></span></button> -->
<!-- <strong>Where do you want to go? </strong>
<input id="pac-input" class="controls" type="text" placeholder="Start typing here">
<button>Get Directions</button> -->
<div>
<div id="map-canvas"></div>
<br>
 <form id="calculate-route" name="calculate-route" action="#" method="get" style="width: 40%; float: left;">
  <label for="from">From:</label>
  <input type="text" id="from" name="from" required="required" placeholder="Start typing or click Use my location" size="30" />
  
  <a id="from-link" href="#" class="btn btn-default"><span class="icon-location-arrow"></span></a>
 <br>
  <label for="to">To:</label>
  <input type="text" id="to" name="to" required="required" placeholder="Start typing or click Use my location" size="30" />
  <a id="to-link" href="#" class="btn btn-default"><span class="icon-location-arrow"></a>
  <br />
 
  <input type="submit" class="btn btn-default btn-lg"/>
  <input type="reset" class="btn btn-default btn-lg"/>
<button id="toggle_traffic" class="btn btn-default btn-lg"> Traffic
<span class="icon-taxi-park-front"></span>
</button>
<button id="toggle_weather" class="btn btn-default btn-lg"> Weather 
<span class="icon-cloud"></span></button>
</form>
<div id="panel" style="width: 40%; float: right;"></div>

</div> 
</body>